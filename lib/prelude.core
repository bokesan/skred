--
-- prelude.core
--
-- Standard utility functions.
--
-- All the character functions assume ASCII encoding.
--

False = Pack{0,0};
True  = Pack{1,0};

stdin = _READ (_STD_PORT 0);
-- out_std s = cons (_STD_PORT 1) s;
-- out_err s = cons (_STD_PORT 2) s;
-- out_file f s = cons (output f) s;

max x y	       =  if x <= y then y else x;
min x y	       =  if x <= y then x else y;
negate x       =  0 - x;
abs x	       =  if x < 0 then negate x else x;
subtract x y   =  y - x;
even x	       =  x % 2 == 0;
odd	       =  not . even;

gcd x y	       =  if x==0 && y==0 then
		     error "Prelude.gcd: gcd 0 0 is undefined"
		  else
                     letrec {
                       gcd1 x y =  if y==0 then x
		                   else gcd1 y (x % y)
	             } in gcd1 (abs x) (abs y);

id x	       =  x;
const c x      =  c;
flip f x y     =  f y x;

not x	       =  if x then False else True;
and x y	       =  if x then y else False;
or x y	       =  if x then True else y;
-- otherwise      =  True;

null xs        =  case xs of { <0> -> True; _ -> False };
head xs        =  case xs of { <0> -> error "head"; <1> h _ -> h };
tail xs        =  case xs of { <0> -> error "tail"; <1> _ t -> t };

last xs        =  case xs of {
                    <0> -> error "last";
                    <1> x xs -> case xs of {
                                  <0> -> x;
                                  _   -> last xs
                                }
                  };

init xs        =  case xs of {
                    <0> -> error "init";
                    <1> x xs -> case xs of {
                                  <0> -> [];
                                  _   -> x : init xs
                                }
                  };

length xs      =  case xs of {
                    <0> -> 0;
                    <1> _ xs -> 1 + length xs
                  };

-- until       :: (a -> Bool) -> (a -> a) -> a -> a
until p f x    =  if p x then x else until p f (f x);

-- isDigit isLower isSpace :: Char -> Bool
isDigit c = and ('0' <= c) (c <= '9');
isLower c = and ('a' <= c) (c <= 'z');
isSpace c = or (c == ' ') (c == '\n');

-- digitToInt :: Char -> Int
digitToInt c = c - 48;

-- digitToChar :: Int -> Char
digitToChar n = 48 + n;



append lyst ys = case lyst of {
                   <0> -> ys;
                   <1> x xs -> x : append xs ys
                 };

showsInt n s =
  letrec { i2s n result =
             if n == 0 then result
             else i2s (n / 10) (digitToChar (n % 10) : result)
  } in
  if n == 0 then '0' : s
  else if n < 0 then '-' : i2s (negate n) s
  else i2s n s;

showInt n = showsInt n "";

-- readInt :: String -> [(Int, String)]
readInt s =
  letrec {
    -- s2i :: Int -> String -> (Int, String)
    s2i r s = case s of {
                <0> -> Pack{0,2} r "";
                <1> d ds -> if isDigit d then s2i (10 * r + digitToInt d) ds
                            else Pack{0,2} r s
              }
  } in
  letrec { pos s = case s of {
                     <0> -> [];
                     <1> d ds -> if isDigit d then (s2i (digitToInt d) ds : [])
                                 else []
                   }
  } in
  case dropWhile isSpace s of {
    <0> -> [];
    <1> d ds -> if d == '-' then
                  map (\p -> case p of { <0> a b -> Pack{0,2} (negate a) b }) (pos ds)
                else
                  pos (d:ds)
  };

-- stringToInt :: String -> Int
stringToInt s = case readInt s of {
           <0> -> error "stringToInt: empty string";
           <1> h t -> if not (null t) then error "stringToInt: multiple parses"
                      else case h of {
                             <0> f s -> if not (null s) then error "stringToInt: non-digits"
                                        else f
                           }
         };


-- reverse :: [a] -> [a]
reverse xs =
  letrec { rev rs xs = case xs of { <0> -> rs; <1> h t -> rev (h:rs) t } }
  in rev [] xs;

-- concat :: [[a]] -> [a]
concat = foldr append [];

-- map :: (a -> b) -> [a] -> [b]
map f xs = case xs of {
             <0> -> [];
             <1> y ys -> f y : map f ys
           };


dropWhile p xs = case xs of {
                   <0> -> [];
                   <1> y ys -> if p y then dropWhile p ys else xs };

takeWhile p xs = case xs of {
                   <0> -> [];
                   <1> y ys -> if p y then y : takeWhile p ys
                               else []
                 };

-- filter :: (a -> Bool) -> [a] -> [a]
filter p xs = case xs of {
                <0> -> [];
                <1> y ys -> if p y then y : filter p ys
                            else filter p ys };

-- any, all :: (a -> Bool) -> [a] -> Bool
any p = foldr (\x r -> if p x then True else r) False;
all p = foldr (\x r -> if p x then r else False) True;

-- foldl :: (a -> b -> a) -> a -> [b] -> a
foldl f a xs  =  case xs of {
                   <0> -> a;
                   <1> h t -> foldl f (f a h) t
                 };

-- foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f a xs  =  case xs of {
                   <0> -> a;
                   <1> h t -> f h (foldr f a t)
                 };

-- foldl1 :: (a -> a -> a) -> [a] -> a
foldl1 f xs = case xs of {
                <0> -> error "foldl1";
                <1> h t -> foldl f h t
              };

-- foldr1 :: (a -> a -> a) -> [a] -> a
foldr1 f xs = case xs of {
                <0> -> error "foldr1";
                <1> y ys -> case ys of {
                              <0> -> y;
                              _ -> f y (foldr1 f ys)
                            }
              };


-- format :: String -> [any] -> String
format f a =
   if
      null f then []
   else if
      head f == '~' then
      		   (if
		      (head (tail f)) == 's' then
      		         append (head a) (format (tail (tail f)) (tail a))
                    else if
		      (head (tail f)) == 'd' then
      		         showsInt (head a)
      		          (format (tail (tail f)) (tail a))
                    else error 0)
   else
      head f : format (tail f) a;


-- take :: Int -> [a] -> [a]
take n xs = if n <= 0 then
              []
            else
              case xs of {
                <0> -> [];
                <1> h t -> h : take (n - 1) t
              };

-- drop :: Int -> [a] -> [a]
drop n xs = if n <= 0 then
              xs
            else
              case xs of {
                <0> -> [];
                <1> _ t -> drop (n - 1) t
              };

-- iterate :: (a -> a) -> a -> [a]
iterate f x = x : iterate f (f x);

enumFrom = iterate succ;
enumFromTo a b = takeWhile (\n -> b >= n) (enumFrom a);


-- zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith f xs ys =
  case xs of {
    <0> -> [];
    <1> x xs -> case ys of {
                  <0> -> [];
                  <1> y ys -> f x y : zipWith f xs ys
                }
  }
