--
-- prelude.core
--
-- Standard functions and support for built-in operators.
--

-- ----- Built-in operator support -----
--
-- The following definitions are needed for the operators &&, ||, and ++ to work.
-- If you modifiy them, strange things will happen.

-- "p && q" translates to "and p q"
and p q	       =  if p then q else Pack{0,0};

-- "p || q" translates to "or p q"
or p q	       =  if p then Pack{1,0} else q;

-- "xs ++ ys" translates to "append xs xs"
append lyst ys = case lyst of {
                   <0> -> ys;
                   <1> x xs -> x : append xs ys
                 };


-- ----- Functions -----

id x	       =  x;         -- I combinator
const c _      =  c;         -- K combinator
flip f x y     =  f y x;     -- C combinator
-- function composition "f . g" is built-in syntax that translates to the B combinator

-- until       :: (a -> Bool) -> (a -> a) -> a -> a
until p f x    =  if p x then x else until p f (f x);



-- ----- Booleans -----

False = Pack{0,0};
True  = Pack{1,0};

not p = if p then False else True;


-- ----- Numbers -----
--
-- skred only supports 32-bit twos-complement integers
--
-- Built-in functions (with infix equivalent, if applicable):
--
-- add (+), sub (-), mul (*), quot (/), rem (%),
-- eq (==), ne (/=), lt (<), le (<=), gt (>), ge (>=),
-- compare.

negate x       =  0 - x;
max x y	       =  if x <= y then y else x;
min x y	       =  if x <= y then x else y;
abs x	       =  if x < 0 then negate x else x;
subtract x y   =  y - x;
even x	       =  x % 2 == 0;
odd x          =  x % 2 /= 0;

-- The compare functions returns one of these values (Ordering):
LT = Pack{0,0};
EQ = Pack{1,0};
GT = Pack{2,0};


-- ----- Lists -----
--
-- The [] syntax and the : operator are built-in.

null xs        =  case xs of { <0> -> True; _ -> False };
head xs        =  case xs of { <0> -> error "head: empty list"; <1> h _ -> h };
tail xs        =  case xs of { <0> -> error "tail: empty list"; <1> _ t -> t };

last xs        =  case xs of {
                    <0> -> error "last: empty list";
                    <1> x xs -> case xs of {
                                  <0> -> x;
                                  _   -> last xs
                                }
                  };

init xs        =  case xs of {
                    <0> -> error "init: empty list";
                    <1> x xs -> case xs of {
                                  <0> -> [];
                                  _   -> x : init xs
                                }
                  };

length xs      =  case xs of {
                    <0> -> 0;
                    <1> _ xs -> 1 + length xs
                  };

-- reverse :: [a] -> [a]
reverse xs =
  letrec { rev rs xs = case xs of { <0> -> rs; <1> h t -> rev (h:rs) t } }
  in rev [] xs;

-- concat :: [[a]] -> [a]
concat = foldr append [];

-- map :: (a -> b) -> [a] -> [b]
map f xs = case xs of {
             <0> -> [];
             <1> y ys -> f y : map f ys
           };


dropWhile p xs = case xs of {
                   <0> -> [];
                   <1> y ys -> if p y then dropWhile p ys else xs };

takeWhile p xs = case xs of {
                   <0> -> [];
                   <1> y ys -> if p y then y : takeWhile p ys
                               else []
                 };

-- filter :: (a -> Bool) -> [a] -> [a]
filter p xs = case xs of {
                <0> -> [];
                <1> y ys -> if p y then y : filter p ys
                            else filter p ys };

-- any, all :: (a -> Bool) -> [a] -> Bool
any p = foldr (\x r -> if p x then True else r) False;
all p = foldr (\x r -> if p x then r else False) True;

-- foldl :: (a -> b -> a) -> a -> [b] -> a
foldl f a xs  =  case xs of {
                   <0> -> a;
                   <1> h t -> foldl f (f a h) t
                 };

-- foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f a xs  =  case xs of {
                   <0> -> a;
                   <1> h t -> f h (foldr f a t)
                 };

-- foldl1 :: (a -> a -> a) -> [a] -> a
foldl1 f xs = case xs of {
                <0> -> error "foldl1";
                <1> h t -> foldl f h t
              };

-- foldr1 :: (a -> a -> a) -> [a] -> a
foldr1 f xs = case xs of {
                <0> -> error "foldr1";
                <1> y ys -> case ys of {
                              <0> -> y;
                              _ -> f y (foldr1 f ys)
                            }
              };

-- take :: Int -> [a] -> [a]
take n xs = if n <= 0 then
              []
            else
              case xs of {
                <0> -> [];
                <1> h t -> h : take (n - 1) t
              };

-- drop :: Int -> [a] -> [a]
drop n xs = if n <= 0 then
              xs
            else
              case xs of {
                <0> -> [];
                <1> _ t -> drop (n - 1) t
              };

-- iterate :: (a -> a) -> a -> [a]
iterate f x = x : iterate f (f x);

enumFrom = iterate succ;
enumFromTo a b = takeWhile (\n -> b >= n) (enumFrom a);

-- zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith f xs ys =
  case xs of {
    <0> -> [];
    <1> x xs -> case ys of {
                  <0> -> [];
                  <1> y ys -> f x y : zipWith f xs ys
                }
  };

-- zip :: [a] -> [b] -> [(a,b)]
zip = zipWith Pack{0,2};



-- ----- Characters and Strings
--
-- Characters are represented as integers. Strings are lists of characters.
--
-- All the character functions assume ASCII encoding.

isDigit c = '0' <= c && c <= '9';
isLower c = 'a' <= c && c <= 'z';
isSpace c = c == ' ' || c == '\n';

digitToInt c = c - '0';
digitToChar n = '0' + n;

-- showsInt :: Int -> String -> String
showsInt n s =
  letrec { i2s n result =
             if 0 == n then result
             else i2s (n / 10) (digitToChar (n % 10) : result)
  } in
  case compare 0 n of {
    <0> -> i2s n s;
    <1> -> '0' : s;
    <2> -> '-' : i2s (negate n) s
  };

showInt n = showsInt n "";

-- readInt :: String -> [(Int, String)]
readInt s =
  letrec {
    -- s2i :: Int -> String -> (Int, String)
    s2i r s = case s of {
                <0> -> Pack{0,2} r "";
                <1> d ds -> if isDigit d then s2i (10 * r + digitToInt d) ds
                            else Pack{0,2} r s
              }
  } in
  letrec { pos s = case s of {
                     <0> -> [];
                     <1> d ds -> if isDigit d then (s2i (digitToInt d) ds : [])
                                 else []
                   }
  } in
  case dropWhile isSpace s of {
    <0> -> [];
    <1> d ds -> if d == '-' then
                  map (\p -> case p of { <0> a b -> Pack{0,2} (negate a) b }) (pos ds)
                else
                  pos (d:ds)
  };

-- stringToInt :: String -> Int
stringToInt s = case readInt s of {
           <0> -> error "stringToInt: empty string";
           <1> h t -> if not (null t) then error "stringToInt: multiple parses"
                      else case h of {
                             <0> f s -> if not (null s) then error "stringToInt: non-digits"
                                        else f
                           }
         };


-- format :: String -> [any] -> String
format f a =
   if
      null f then []
   else if
      head f == '~' then
      		   (if
		      (head (tail f)) == 's' then
      		         append (head a) (format (tail (tail f)) (tail a))
                    else if
		      (head (tail f)) == 'd' then
      		         showsInt (head a)
      		          (format (tail (tail f)) (tail a))
                    else error 0)
   else
      head f : format (tail f) a;

-- ----- Maybe -----

Nothing = Pack{0,0};
Just = Pack{1,1};

mapMaybe f x = case x of {
                 <0> -> Nothing;
                 <1> v -> Just (f v)
               };


-- ----- IO and System -----

-- cmdLine :: [String]  is built-in

returnIO = Pack{0,2};

seqIO a b w = case a w of {
                <0> v w' -> b v w;
                err -> err
            };

seqIO' a b = seqIO a (const b);

doIO actions z = case actions of {
                   <0> -> returnIO z;
                   <1> x xs -> seqIO (x z) (doIO xs)
                 };

doIO' actions = case actions of {
                  <0> -> error "doIO': no actions";
                  <1> a1 r -> case r of {
                                <0> -> a1;
                                _   -> seqIO' a1 (doIO' r)
                              }
                };

stdin = primStdPort 0;
stdout = primStdPort 1;
stderr = primStdPort 2;

hGetLine h =
  seqIO (hGetChar h)
        (\c -> if c == 10 then
                 returnIO ""
               else seqIO (hGetLine h) (\cs -> returnIO (c:cs)));

getLine = hGetLine stdin;

getContents = hGetContents stdin;

hGetContents h = returnIO (_READ h);

-- hPutStrLn :: Handle -> String -> IO ()
hPutStr h s = case s of {
                <0> -> returnIO Pack{0,0};
                <1> c cs -> seqIO' (hPutChar h c) (hPutStr h cs)
              };

hPutStrLn h s = seqIO' (hPutStr h s) (hPutChar h '\n');

putStr = hPutStr stdout;
putStrLn = hPutStrLn stdout;

-- interact :: (String -> String) -> IO ()
interact f = seqIO getContents (\s -> putStr (f s))
